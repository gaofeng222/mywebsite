import{_ as e,c as t,o as a,a as o}from"./app.e6464ad1.js";const h=JSON.parse('{"title":"Vue 基础必会","description":"","frontmatter":{},"headers":[],"relativePath":"vue/vue-base.md","lastUpdated":1678935368000}'),s={name:"vue/vue-base.md"},n=o(`<h1 id="vue-基础必会" tabindex="-1">Vue 基础必会 <a class="header-anchor" href="#vue-基础必会" aria-hidden="true">#</a></h1><h2 id="mvc-架构" tabindex="-1">MVC 架构 <a class="header-anchor" href="#mvc-架构" aria-hidden="true">#</a></h2><p><code>MVC</code> 指的是 <code>Model-View-Controller</code>，分别代表着模型层、视图层、控制器。</p><p><code>Model</code>（模型层），主要管理的是业务模型的数据和处理数据的逻辑。</p><p><code>View</code>（视图层）主要是接收用户的交互请求并展示数据信息给用户。</p><p><code>Controller</code>（控制器层）主要担任的是 Model 和 View 之间的桥梁，用于控制程序的流程。Controller 负责确保 View 可以访问到需要显示的 Model 对象的数据，View 接收到用户的交互请求之后，会将请求转发给控制器，控制器解析请求之后，会交给对应的 Model 处理。</p><h2 id="mvvm-模型" tabindex="-1">MVVM 模型 <a class="header-anchor" href="#mvvm-模型" aria-hidden="true">#</a></h2><p>MVVM，即是 <code>Model-View-ViewModel</code> 的简写，其本质是 <code>MVC</code> 模型的升级版。其中 <code>Model</code> 代表数据模型，<code>View</code> 代表看到的页面，<code>ViewModel</code> 是 <code>View</code> 和 <code>Model</code> 之间的桥梁，数据会绑定到 <code>ViewModel</code> 层并自动将数据渲染到页面中，视图变化的时候会通知 <code>ViewModel</code> 层更新数据。以前是通过操作 <code>DOM</code> 来更新视图，现在是<code>数据驱动视图</code>。</p><h2 id="mvc-和-mvvm-的区别" tabindex="-1">MVC 和 MVVM 的区别 <a class="header-anchor" href="#mvc-和-mvvm-的区别" aria-hidden="true">#</a></h2><p>在已经有了 MVC 架构的时候，为什么还要衍生出 MVVM 架构，这是因为 View 中很多控件的数据类型和 Model 中的属性不相同，例如 Model 中的时间数据可能是一串数字，View 想要展示成日期的格式，这就需要一种转化，这个转换如果放在 View 不合适，因为 View 中不应该出现逻辑代码，放在 Model 中也不合适，这回导致 Model 臃肿庞大，因为这种问题的存在诞生了 ViewModel，这一层可以帮助 View 转化为相应的数据给 Model 或者从 Model 中转化成 View 可以显示的内容。</p><h2 id="vue-的生命周期" tabindex="-1">Vue 的生命周期 <a class="header-anchor" href="#vue-的生命周期" aria-hidden="true">#</a></h2><p>Vue 的生命周期可以分为 8 个阶段，创建前后，挂载前后，更新前后以及销毁前后，以及一些特殊场景的生命周期。V3 新增了 3 个用于调试和服务端渲染的场景</p><table><thead><tr><th style="text-align:center;">Vue2</th><th style="text-align:center;">Vue3(optional api)</th><th style="text-align:center;">Vue3(composition api)</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;"><code>beforeCreate</code></td><td style="text-align:center;"><code>beforeCreate</code></td><td style="text-align:center;"><code>setup()</code></td><td style="text-align:center;">创建前，此时 data 和 methods 的数据都还没有初始化</td></tr><tr><td style="text-align:center;"><code>created</code></td><td style="text-align:center;"><code>created</code></td><td style="text-align:center;"><code>created </code></td><td style="text-align:center;">创建后，data 中有值，尚未挂载，可以进行一些 Ajax 请求</td></tr><tr><td style="text-align:center;"><code>beforeMount</code></td><td style="text-align:center;"><code>beforeMount</code></td><td style="text-align:center;"><code>onBeforeMount</code></td><td style="text-align:center;">挂载前，会找到虚拟 DOM，编译成 Render</td></tr><tr><td style="text-align:center;"><code>mounted</code></td><td style="text-align:center;"><code>mounted</code></td><td style="text-align:center;"><code>onMounted</code></td><td style="text-align:center;">挂载后，DOM 已创建，可用于获取访问数据和 DOM 元素</td></tr><tr><td style="text-align:center;"><code>beforeUpdate</code></td><td style="text-align:center;"><code>beforeUpdate</code></td><td style="text-align:center;"><code>onBeforeUpdate</code></td><td style="text-align:center;">更新前，可用于获取更新前各种状态</td></tr><tr><td style="text-align:center;"><code>updated</code></td><td style="text-align:center;"><code>updated</code></td><td style="text-align:center;"><code>onUpdated</code></td><td style="text-align:center;">更新后，所有状态已是最新</td></tr><tr><td style="text-align:center;"><code>beforeDestroy</code></td><td style="text-align:center;"><code>beforeUnmount</code></td><td style="text-align:center;"><code>onBeforeUnmount</code></td><td style="text-align:center;">销毁前，可用于一些定时器或订阅的取消</td></tr><tr><td style="text-align:center;"><code>destroyed</code></td><td style="text-align:center;"><code>unmounted</code></td><td style="text-align:center;"><code>onUnmounted</code></td><td style="text-align:center;">销毁后，可用于一些定时器或订阅的取消</td></tr><tr><td style="text-align:center;"><code>activated </code></td><td style="text-align:center;"><code> activated</code></td><td style="text-align:center;"><code>onActivated </code></td><td style="text-align:center;"><code>keep-alive</code> 缓存的组件激活时</td></tr><tr><td style="text-align:center;"><code>deactivated</code></td><td style="text-align:center;"><code>deactivated</code></td><td style="text-align:center;"><code>onDeactivated</code></td><td style="text-align:center;"><code>keep-alive</code> 缓存的组件停用时</td></tr><tr><td style="text-align:center;"><code>errorCaptured</code></td><td style="text-align:center;"><code>errorCaptured</code></td><td style="text-align:center;"><code>onErrorCaptured </code></td><td style="text-align:center;">捕获一个来自子孙组件的错误时调 用</td></tr><tr><td style="text-align:center;">—</td><td style="text-align:center;"><code>renderTracked </code></td><td style="text-align:center;"><code>onRenderTracked</code></td><td style="text-align:center;">调试钩子，响应式依赖被收集时调用</td></tr><tr><td style="text-align:center;">—</td><td style="text-align:center;"><code>renderTriggered</code></td><td style="text-align:center;"><code>onRenderTriggered</code></td><td style="text-align:center;">调试钩子，响应式依赖被触发时调 用</td></tr><tr><td style="text-align:center;">—</td><td style="text-align:center;"><code>serverPrefetch</code></td><td style="text-align:center;"><code>onServerPrefetch</code></td><td style="text-align:center;">组件实例在服务器上被渲染前</td></tr></tbody></table><h2 id="父子组件创建的先后顺序" tabindex="-1">父子组件创建的先后顺序 <a class="header-anchor" href="#父子组件创建的先后顺序" aria-hidden="true">#</a></h2><ul><li><p>挂载阶段 父 <code>beforeCreate</code> -&gt; 父 <code>created</code> -&gt; 父 <code>beforeMount</code> -&gt; 子 <code>beforeCreate</code> -&gt; 子 <code>created</code> -&gt; 子 <code>beforeMounte</code>-&gt; 子 <code>mounted</code> -&gt; 父 <code>mounted</code></p></li><li><p>更新阶段 父 <code>beforeUpdate</code> -&gt; 子 <code>beforeUpdate</code> -&gt; 子 <code>updated</code> -&gt; 父 <code>updated</code></p></li><li><p>销毁阶段：父 <code>beforeDestroy</code> -&gt; 子 <code>beforeDestroy</code> -&gt; 子 <code>destroyed</code> -&gt; 父 <code>destroyed</code></p></li></ul><h2 id="vue-nexttick" tabindex="-1">Vue.$nextTick <a class="header-anchor" href="#vue-nexttick" aria-hidden="true">#</a></h2><p><strong>在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。</strong></p><p>nextTick 是 Vue 提供的一个全局 API，由于 Vue 的异步更新策略，导致我们对数据修改后不会直接体现在 DOM 上，此时如果想要立即获取更新后的 DOM 状态，就需要借助该方法。 Vue 在更新  DOM  时是异步执行的。</p><p>当数据发生变化，Vue 将开启一个异步更新队列，并缓冲在同一事件循环中发生的所有数据变更。如果同一个 watcher 被多次触发，只会被推入队列一次。 这种在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作是非常重要的。nextTick 方法会在队列中加入一个回调函数，确保该函数在前面的 DOM 操作完成后才调用。</p><p><strong>使用场景：</strong></p><p>如果想要在修改数据后立刻得到更新后的 DOM 结构，可以使用 Vue.nextTick() 在 created 生命周期中进行 DOM 操作</p><h2 id="vue-的模版编译原理" tabindex="-1">Vue 的模版编译原理 <a class="header-anchor" href="#vue-的模版编译原理" aria-hidden="true">#</a></h2><p>Vue 中有个独特的编译器模块，称为 <code>compiler</code>，它的主要作用是将用户编写的 <code>template</code> 编译为 js 中可执行的 <code>render</code> 函数。 在 Vue 中，编译器会先对 <code>template</code> 进行解析，这一步称为 <code>parse</code>，结束之后得到一个 JS 对象，称之为抽象语法树 <code>AST</code>； 然后是对 AST 进行深加工的转换过程，这一步称为 <code>transform</code>，最后将前面得到的 AST 生成 JS 代码，也就是 <code>render</code> 函数</p><h2 id="vue-实例挂载过程中发生了什么" tabindex="-1">Vue 实例挂载过程中发生了什么？ <a class="header-anchor" href="#vue-实例挂载过程中发生了什么" aria-hidden="true">#</a></h2><p>挂载过程指的是 <code>app.mount()</code>过程，这是一个初始化过程，整体上做了两件事情： <strong>初始化和建立更新机制</strong>。</p><p>初始化会创建组件实例、初始化组件状态、创建各种响应式数据。</p><p>建立更新机制这一步会立即执行一次组件的更新函数，这会首次执行组件渲染函数并执行 <code>patch</code> 将 <code>vnode</code> 转换为 dom； 同时首次执行渲染函数会创建它内部响应式数据和组件更新函数之间的依赖关系，这使得以后数据发生变化时会执行对应的更新函数。</p><h2 id="vue-的响应式原理" tabindex="-1">Vue 的响应式原理 <a class="header-anchor" href="#vue-的响应式原理" aria-hidden="true">#</a></h2><p>Vue2 中的数据响应式会根据数据类型做不同的处理。如果是对象，则通过 <code>Object.defineProperty(obj,key,descriptor)</code>拦截对象属性访问，当数据被访问或改变时，感知并作出反应；如果是数组，则通过覆盖数组原型的方法，扩展它的 7 个变更方法（<code>push、pop、shift、unshift、splice、sort、reverse</code>），使这些方法可以额外的做更新通知，从而做出响应。</p><ul><li>缺点：</li></ul><ul><li>初始化时的递归遍历会造成性能损失；</li><li>通知更新过程需要维护大量 dep 实例和 watcher 实例，额外占用内存较多；</li><li>新增或删除对象属性无法拦截，需要通过 Vue.set 及 delete 这样的 API 才能生效；</li><li>对于 ES6 中新产生的 Map、Set 这些数据结构不支持。</li></ul><p>Vue3 中利用 ES6 的<code>Proxy</code>机制代理需要响应化的数据。可以同时支持对象和数组，动态属性增、删都可以拦截，新增数据结构均支持，对象嵌套属性运行时递归，用到时才代理，也不需要维护特别多的依赖关系，性能取得很大进步。</p><h2 id="虚拟-dom" tabindex="-1">虚拟 DOM <a class="header-anchor" href="#虚拟-dom" aria-hidden="true">#</a></h2><p><strong>概念：</strong></p><p>虚拟 DOM，顾名思义就是虚拟的 DOM 对象，它本身就是一个 JS 对象，只不过是通过不同的属性去描述一个视图结构。</p><p><strong>虚拟 DOM 的好处：</strong></p><p>(1) 性能提升 直接操作 DOM 是有限制的，一个真实元素上有很多属性，如果直接对其进行操作，同时会对很多额外的属性内容进行了操作，这是没有必要的。如果将这些操作转移到 JS 对象上，就会简单很多。另外，操作 DOM 的代价是比较昂贵的，频繁的操作 DOM 容易引起页面的重绘和回流。如果通过抽象 VNode 进行中间处理，可以有效减少直接操作 DOM 次数，从而减少页面的重绘和回流。</p><p>(2) 方便跨平台实现 同一 VNode 节点可以渲染成不同平台上对应的内容，比如：渲染在浏览器是 DOM 元素节点，渲染在 Native（iOS、Android）变为对应的控件。Vue 3 中允许开发者基于 VNode 实现自定义渲染器（renderer），以便于针对不同平台进行渲染。</p><p><strong>结构：</strong></p><p>没有统一的标准，一般包括 <code>tag、props、children</code> 三项。<br> tag：必选。就是标签，也可以是组件，或者函数。<br> props：非必选。就是这个标签上的属性和方法。<br> children：非必选。就是这个标签的内容或者子节点。如果是文本节点就是字符串；如果有子节点就是数组。换句话说，如果判断 children 是字符串的话，就表示一定是文本节点，这个节点肯定没有子元素。</p><h2 id="diff-算法" tabindex="-1">diff 算法 <a class="header-anchor" href="#diff-算法" aria-hidden="true">#</a></h2><p><strong>概念：</strong></p><p>diff 算法是一种对比算法，通过对比旧的虚拟 DOM 和新的虚拟 DOM，得出是哪个虚拟节点发生了改变，找出这个虚拟节点并只更新这个虚拟节点所对应的真实节点，而不用更新其他未发生改变的节点，实现精准地更新真实 DOM，进而提高效率。</p><p><strong>对比方式：</strong></p><p>diff 算法的整体策略是：深度优先，同层比较。比较只会在同层级进行, 不会跨层级比较；比较的过程中，循环从两边向中间收拢。</p><ul><li><p>首先判断两个节点的 tag 是否相同，不同则删除该节点重新创建节点进行替换。</p></li><li><p>tag 相同时，先替换属性，然后对比子元素，分为以下几种情况：</p><ul><li><p>新旧节点都有子元素时，采用双指针方式进行对比。新旧头尾指针进行比较，循环向中间靠拢，根据情况调用 patchVnode 进行 patch 重复流程、调用 createElem 创建一个新节点，从哈希表寻找 key 一致的 VNode 节点再分情况操作。</p></li><li><p>新节点有子元素，旧节点没有子元素，则将子元素虚拟节点转化成真实节点插入即可。</p></li><li><p>新节点没有子元素，旧节点有子元素，则清空子元素，并设置为新节点的文本内容。</p></li><li><p>新旧节点都没有子元素时，即都为文本节点，则直接对比文本内容，不同则更新。</p></li></ul></li></ul><h2 id="vue-中-key-的作用" tabindex="-1">Vue 中 key 的作用？ <a class="header-anchor" href="#vue-中-key-的作用" aria-hidden="true">#</a></h2><p><strong>key 的作用主要是为了更加高效的更新虚拟 DOM。</strong></p><p>Vue 判断两个节点是否相同时，主要是判断两者的 key 和元素类型 tag。因此，如果不设置 key ，它的值就是 undefined，则可能永远认为这是两个不相同的节点，只能去做更新操作，将造成大量的 DOM 更新操作。</p><h2 id="为什么组件中的-data-是一个函数" tabindex="-1">为什么组件中的 data 是一个函数？ <a class="header-anchor" href="#为什么组件中的-data-是一个函数" aria-hidden="true">#</a></h2><p>在 <code>new Vue()</code> 中，可以是函数也可以是对象，因为根实例只有一个，不会产生数据污染。</p><p>在组件中，data 必须为函数，目的是为了防止多个组件实例对象之间共用一个 data，产生数据污染；而采用函数的形式，initData 时会将其作为工厂函数都会返回全新的 data 对象。</p><h2 id="vue-中组件间的通信方式" tabindex="-1">Vue 中组件间的通信方式？ <a class="header-anchor" href="#vue-中组件间的通信方式" aria-hidden="true">#</a></h2><ul><li><p>父子组件通信：</p><p>父向子传递数据是通过 props，子向父是通过$emit触发事件；<br> 通过父链/子链也可以通信（$parent/$children）；<br> ref也可以访问组件实例；<br> provide/inject；$attrs/$listeners。</p></li><li><p>兄弟组件通信： 全局事件总线 EventBus、Vuex。</p></li><li><p>跨层级组件通信： 全局事件总线 EventBus、Vuex、provide/inject。</p></li></ul><p>##页面刷新后 Vuex 状态丢失怎么解决？##</p><p><code>Vuex</code> 只是在内存中保存状态，刷新后就会丢失，如果要持久化就需要保存起来。 <code>localStorage</code> 就很合适，提交 <code>mutation</code> 的时候同时存入 <code>localStorage</code>，在 store 中把值取出来作为 state 的初始值即可。 也可以使用第三方插件，推荐使用 <code>vuex-persist</code> 插件，它是为 Vuex 持久化储存而生的一个插件，不需要你手动存取 storage，而是直接将状态保存至 cookie 或者 localStorage 中。</p><h2 id="关于-vue-ssr-的理解" tabindex="-1">关于 Vue SSR 的理解？ <a class="header-anchor" href="#关于-vue-ssr-的理解" aria-hidden="true">#</a></h2><p><code>SSR</code> 即服务端渲染（<code>Server Side Render</code>），就是将 Vue 在客户端把标签渲染成 html 的工作放在服务端完成，然后再把 html 直接返回给客户端。</p><p><strong>优点：</strong></p><p>有着更好的 SEO，并且首屏加载速度更快。</p><p><strong>缺点：</strong></p><p>开发条件会受限制，服务器端渲染只支持 beforeCreate 和 created 两个钩子，当我们需要一些外部扩展库时需要特殊处理，服务端渲染应用程序也需要处于 Node.js 的运行环境。服务器会有更大的负载需求。</p><h2 id="了解哪些-vue-的性能优化方法" tabindex="-1">了解哪些 Vue 的性能优化方法？ <a class="header-anchor" href="#了解哪些-vue-的性能优化方法" aria-hidden="true">#</a></h2><ul><li>路由懒加载。有效拆分应用大小，访问时才异步加载。</li><li>keep-alive 缓存页面。避免重复创建组件实例，且能保留缓存组件状态。</li><li>v-for 遍历避免同时使用 v-if。实际上在 Vue 3 中已经是一个错误用法了。</li><li>长列表性能优化，可采用虚拟列表。</li><li>v-once。不再变化的数据使用 v-once。</li><li>事件销毁。组件销毁后把全局变量和定时器销毁。</li><li>图片懒加载。</li><li>第三方插件按需引入。</li><li>子组件分割。较重的状态组件适合拆分。</li><li>服务端渲染。</li></ul><h2 id="vue-和-react-的区别" tabindex="-1">Vue 和 React 的区别 <a class="header-anchor" href="#vue-和-react-的区别" aria-hidden="true">#</a></h2><p><strong>一、核心思想不同</strong></p><ul><li><p>Vue 的核心思想是尽可能的降低前端开发的门槛，是一个灵活易用的渐进式双向绑定的 MVVM 框架。</p></li><li><p>React 的核心思想是声明式渲染和组件化、单向数据流，React 既不属于 MVC 也不属于 MVVM 架构。</p></li></ul><blockquote><p>React1：声明式是什么意思？<br> 声明式与之相对应的是命令式，命令式指的是通过 DOM 操作一步步把网页变成想要的样子，而声明式则是只需要通过状态去形容最后的网页长什么样子即可。</p></blockquote><blockquote><p>React2：组件化是什么意思？<br> 组件化指的是尽可能的将页面拆分成一个个较小的、可以复用的组件，这样让我们的代码更加方便组织和管理，并且拓展性页更强。</p></blockquote><blockquote><p>React3：如何理解 React 的单向数据流？<br> React 的单向数据流指的是数据主要从父节点通过 props 传递到子节点，如果顶层某个 props 改变了，React 会重新渲染所有的子节点，但是单向数据流并非单向绑定，React 想要从一个组件去更新另一个组件的状态，需要进行状态提升，即将状态提升到他们最近的祖先组件中，触发父组件的状态变更，从而影响另一个组件的显示。单向数据流的好处是能够保证状态改变的可追溯性，假如，父组件维护了一个状态，子组件如果能够随意更改父组件的状态，那么各组件的状态改变就会变得难以追溯。</p></blockquote><p><strong>二、组件写法上不同</strong></p><ul><li><p>Vue 的组件写法是通过 template 的单文件组件格式。</p></li><li><p>React 的组件写法是 JSX+inline style，也就是吧 HTML 和 CSS 全部写进 JavaScript 中。</p></li></ul><p><strong>三、Diff 算法不同</strong></p><p>Diff 算法前置知识：虚拟 DOM</p><p>虚拟 Dom，其实很简单，就是一个用来描述真实 Dom 的对象</p><p>它有六个属性，sel 表示当前节点标签名，data 内是节点的属性，children 表示当前节点的其他子标签节点，elm 表示当前虚拟节点对应的真实节点（这里暂时没有），key 即为当前节点的 key，text 表示当前节点下的文本，结构类似这样。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> vnode </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">sel</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ul</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">children</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">sel</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">li</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">class</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">item</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">text</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">son1</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">sel</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">li</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">class</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">item</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">text</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">son2</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  ]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">elm</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">undefined,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">key</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">undefined,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">text</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">undefined</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="vue-常用设计模式有哪些并举例使用场景" tabindex="-1">vue 常用设计模式有哪些并举例使用场景 <a class="header-anchor" href="#vue-常用设计模式有哪些并举例使用场景" aria-hidden="true">#</a></h2><ul><li>工厂模式 - 传入参数即可创建实例</li><li>虚拟 DOM 根据参数的不同返回基础标签的 Vnode 和组件 Vnode</li><li>单例模式 - 整个程序有且仅有一个实例 vuex 和 vue-router 的插件注册方法 install 判断如果系统存在实例就直接返回掉</li><li>发布-订阅模式 (vue 事件机制)</li><li>观察者模式 (响应式数据原理)</li><li>装饰模式: (@装饰器的用法)</li><li>策略模式 策略模式指对象有某个行为,但是在不同的场景中,该行为有不同的实现方案-比如选项的合并策略</li></ul><p>参考链接:<a href="https://juejin.cn/post/7191325434486161467" target="_blank" rel="noreferrer">2023 前端面试系列-- Vue 篇</a></p>`,80),l=[n];function d(c,r,p,i,y,D){return a(),t("div",null,l)}const g=e(s,[["render",d]]);export{h as __pageData,g as default};
