import{_ as s,c as a,o as n,a as e}from"./app.e6464ad1.js";const F=JSON.parse('{"title":"Eventloop 的理解(事件循环)","description":"","frontmatter":{},"headers":[],"relativePath":"js/eventloop.md","lastUpdated":1678935368000}'),o={name:"js/eventloop.md"},p=e(`<h1 id="eventloop-的理解-事件循环" tabindex="-1">Eventloop 的理解(事件循环) <a class="header-anchor" href="#eventloop-的理解-事件循环" aria-hidden="true">#</a></h1><h2 id="js-是单线程的" tabindex="-1">JS 是单线程的 <a class="header-anchor" href="#js-是单线程的" aria-hidden="true">#</a></h2><p>也就是说它同时只能做一件事,它的主要作用是和用户互动，及操作 dom，就决定了它只能是单线程。多线程的话，一个线程在添加一个线程在删除，就乱了。</p><h2 id="同步与异步" tabindex="-1">同步与异步 <a class="header-anchor" href="#同步与异步" aria-hidden="true">#</a></h2><p>同步代码会立即放入 js 引擎的主线程执行，并原地等待结果 异步代码：先放入宿主环境（浏览器/node），不必原地等待结果，并不阻塞主线程继续往下执行，异步结果在将来执行</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">//同步</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">test1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">test2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//异步</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">test1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#82AAFF;">setTimeout</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">test2</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">test3</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><h2 id="事件循环的过程" tabindex="-1">事件循环的过程 <a class="header-anchor" href="#事件循环的过程" aria-hidden="true">#</a></h2><p>1.js 是单线程的，防止代码阻塞，我们把代码（任务）：分成同步和异步<br> 2.同步任务交给 js 引擎执行，异步代码交给宿主环境（浏览器/node）<br> 3.同步代码放入执行栈中，异步代码等待时机成熟送入任务队列排队<br> 4.执行栈执行完毕，会去任务队列看是否有异步任务，有就把异步任务里面的回调函数送到执行栈，反复循环查看执行，这个过程就是事件循环（Eventloop）。</p><h2 id="宏任务和微任务" tabindex="-1">宏任务和微任务 <a class="header-anchor" href="#宏任务和微任务" aria-hidden="true">#</a></h2><p>JS 把异步任务分为宏任务和微任务</p><p>宏任务是宿主（浏览器/node）发起，script/事件/网络请求/setTimeout/setInterval</p><p>微任务是 js 引擎发起的任务，promise promise 本身是同步的，then/catch 的回调函数是异步的</p><p>原则就是执行完执行栈里面的同步任务，再去执行异步任务里面的微任务（promise.then/catch），执行完再执行异步里面的宏任务（setTimeout/setInterval）</p><p>async await 基于 promise，也是亦不为任务，async 是同步的，但是 await 之后的都是异步的，要等待执行完才执行</p><p><a href="https://www.bilibili.com/video/BV1Zg411z7cv/?spm_id_from=pageDriver&amp;vd_source=5f704a73611cba40b8f8f7d423e9ee2a" target="_blank" rel="noreferrer">视频讲解</a><br><a href="http://www.jsv9000.app/" target="_blank" rel="noreferrer">在线演示网站</a></p>`,15),l=[p];function t(r,c,i,D,y,d){return n(),a("div",null,l)}const h=s(o,[["render",t]]);export{F as __pageData,h as default};
