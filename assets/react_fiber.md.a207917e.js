import{_ as a,c as e,o as s,a as n}from"./app.e6464ad1.js";const F=JSON.parse('{"title":"React Fiber 原理实现","description":"","frontmatter":{},"headers":[],"relativePath":"react/fiber.md","lastUpdated":1678935368000}'),r={name:"react/fiber.md"},t=n(`<h1 id="react-fiber-原理实现" tabindex="-1">React Fiber 原理实现 <a class="header-anchor" href="#react-fiber-原理实现" aria-hidden="true">#</a></h1><h2 id="react16-之前的问题" tabindex="-1">react16 之前的问题 <a class="header-anchor" href="#react16-之前的问题" aria-hidden="true">#</a></h2><p>react16 之前 dom 元素的更新采用递归遍历的方式来对比子节点。一旦进入到递归遍历，整个过程将不能被打断，如果 dom 树的层次比较深，整个对比过程将耗时较长。而 js 的运行和 dom 的渲染又是互斥的，所以很容易造成卡顿。</p><h2 id="fiber" tabindex="-1">Fiber <a class="header-anchor" href="#fiber" aria-hidden="true">#</a></h2><p>fiber 是 react16 采用的一种新的节点对比更新方法，是为了解决 react16 之前的问题而产生的。</p><h2 id="核心思想" tabindex="-1">核心思想 <a class="header-anchor" href="#核心思想" aria-hidden="true">#</a></h2><p>任务拆分，将任务才分成一个个小的任务 在浏览器空闲时间执行任务，避免长时间占用主线程 使用循环模拟递归，因为循环是可以中断的</p><h2 id="实现思路" tabindex="-1">实现思路 <a class="header-anchor" href="#实现思路" aria-hidden="true">#</a></h2><p>在 Fiber 方案中，为了实现任务的中断再继续，DOM 比对算法被分成了两部分：</p><p>构建 fiber，这个过程可以中断 提交 Commit，不可中断 初始渲染的过程：virtualDom --&gt; fiber --&gt; fiber[] --&gt; Dom Dom 更新操作：newFiber vs oldFiber --&gt; fiber[] --&gt; Dom</p><h2 id="fiber-对象结构" tabindex="-1">Fiber 对象结构 <a class="header-anchor" href="#fiber-对象结构" aria-hidden="true">#</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">type</span><span style="color:#F07178;">         </span><span style="color:#FFCB6B;">节点类型</span><span style="color:#F07178;"> (元素, 文本, 组件)(具体的类型)</span></span>
<span class="line"><span style="color:#F07178;">  props        节点属性</span></span>
<span class="line"><span style="color:#F07178;">  stateNode    节点 DOM 对象 | 组件实例对象</span></span>
<span class="line"><span style="color:#F07178;">  tag          节点标记 (对具体类型的分类 hostRoot || hostComponent || classComponent || functionComponent)</span></span>
<span class="line"><span style="color:#F07178;">  effects      数组, 存储需要更改的 fiber 对象</span></span>
<span class="line"><span style="color:#F07178;">  effectTag    当前 Fiber 要被执行的操作 (新增, 删除, 修改)</span></span>
<span class="line"><span style="color:#F07178;">  parent       当前 Fiber 的父级 Fiber</span></span>
<span class="line"><span style="color:#F07178;">  child        当前 Fiber 的子级 Fiber</span></span>
<span class="line"><span style="color:#F07178;">  sibling      当前 Fiber 的下一个兄弟 Fiber</span></span>
<span class="line"><span style="color:#F07178;">  alternate    Fiber 备份 fiber 比对时使用</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>hostRoot：根节点 hostComponent：非根节点 classComponent：类组件 functionComponent：函数组件</p>`,13),o=[t];function p(i,l,c,d,h,b){return s(),e("div",null,o)}const _=a(r,[["render",p]]);export{F as __pageData,_ as default};
