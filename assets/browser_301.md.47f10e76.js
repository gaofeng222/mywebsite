import{_ as e,c as a,o as r,a as t}from"./app.e6464ad1.js";const f=JSON.parse('{"title":"301和302的区别","description":"","frontmatter":{"title":"301和302的区别","editLink":true},"headers":[],"relativePath":"browser/301.md","lastUpdated":1677403524000}'),d={name:"browser/301.md"},i=t('<h1 id="官方说法" tabindex="-1">官方说法 <a class="header-anchor" href="#官方说法" aria-hidden="true">#</a></h1><p><a href="https://imgse.com/i/pSvoibn" target="_blank" rel="noreferrer"><img src="https://s1.ax1x.com/2023/02/23/pSvoibn.md.png" alt="pSvoibn.md.png"></a></p><blockquote><p>301，302  都是 HTTP 状态的编码，都代表着某个 URL 发生了转移，不同之处在于：  301 redirect: 301  代表永久性转移(Permanently Moved)。 302 redirect: 302  代表暂时性转移(Temporarily Moved )。</p></blockquote><h2 id="_1-定义" tabindex="-1">1. 定义 <a class="header-anchor" href="#_1-定义" aria-hidden="true">#</a></h2><p>301：被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个 URI 之一。如果可能，拥有链接编辑功能的客户端应当自动把请求的地址修改为从服务器反馈回来的地址。除非额外指定，否则这个响应也是可缓存的。</p><p>302：请求的资源现在临时从不同的 URI 响应请求。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在 Cache-Control 或 Expires 中进行了指定的情况下，这个响应才是可缓存的。 两者都是一个 POST 请求经过 301/302 后会被浏览器转为 GET 请求</p><h2 id="_2-缓存" tabindex="-1">2. 缓存 <a class="header-anchor" href="#_2-缓存" aria-hidden="true">#</a></h2><p>定义上已经给出，对于 301 请求，浏览器是默认给一个很长的缓存。而 302 是不缓存的。</p><h2 id="_3-搜索引擎" tabindex="-1">3. 搜索引擎 <a class="header-anchor" href="#_3-搜索引擎" aria-hidden="true">#</a></h2><p>301: 旧地址 A 的资源不可访问了(永久移除), 重定向到网址 B，搜索引擎会抓取网址 B 的内容，同时将网址保存为 B 网址。 302: 旧地址 A 的资源仍可访问，这个重定向只是临时从旧地址 A 跳转到 B 地址，这时搜索引擎会抓取 B 网址内容，但是会将网址保存为 A 的。</p><h2 id="_4-安全" tabindex="-1">4. 安全 <a class="header-anchor" href="#_4-安全" aria-hidden="true">#</a></h2><p>尽量使用 301 跳转，以防止网址劫持！</p>',12),n=[i];function o(s,h,c,_,p,l){return r(),a("div",null,n)}const b=e(d,[["render",o]]);export{f as __pageData,b as default};
